import { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { addToCartApi, updateCartItemApi } from "@/api/CartApi";

interface CartItem {
  dish: {
    id: number;
    [key: string]: number;
  };
  quantity: number;
}

const usePostCart = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [cart, setCart] = useState<CartItem[]>([]);
  const nav = useNavigate();

  const addToCart = async (dishId: number, quantity: number = 1) => {
    setLoading(true);
    setError(null);

    try {
      const newCartItem = await addToCartApi(dishId, quantity);
      setCart((prevCart) => {
        const existingItem = prevCart.find((item) => item.dish.id === dishId);
        return existingItem
          ? prevCart.map((item) =>
              item.dish.id === dishId ? { ...item, quantity: item.quantity + quantity } : item
            )
          : [...prevCart, newCartItem];
      });
    } catch (error: unknown) {
      handleCartError(error);
    } finally {
      setLoading(false);
    }
  };

  const updateDishQuantity = async (dishId: number, quantityChange: number) => {
    setLoading(true);
    setError(null);

    try {
      await updateCartItemApi(dishId, quantityChange);
      setCart((prevCart) =>
        prevCart.map((item) =>
          item.dish.id === dishId ? { ...item, quantity: item.quantity + quantityChange } : item
        )
      );
    } catch (error: unknown) {
      handleCartError(error);
    } finally {
      setLoading(false);
    }
  };

  const handleCartError = (error: unknown) => {
    if (axios.isAxiosError(error)) {
      console.error("❌ Cart error:", error.response?.data || error.message);
      setError(error.response?.data?.message || "Cart operation failed.");
    } else {
      console.error("❌ Unexpected error:", error);
      setError("An unexpected error occurred. Please try again.");
    }
    alert("Cart error. Please log in.");
    nav("/signin");
  };

  return { addToCart, updateDishQuantity, cart, loading, error };
};

export default usePostCart;
